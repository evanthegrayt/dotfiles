# vi: set filetype=ruby :

if defined?(IRB)
  begin
    require "irb/ext/save-history"
    require "irb/completion"
    require "pry-editline" # pry automatically loads this.
  rescue LoadError
  end
  IRB.conf[:SAVE_HISTORY] = 1000
  IRB.conf[:HISTORY_FILE] = File.join(ENV["HOME"], ".irb_history")
  local_irbrc = File.join(ENV["HOME"], ".irbrc.local")
  load local_irbrc if File.exist?(local_irbrc)
end

if defined?(Pry)
  Pry.config.color = true
  Pry.config.pager = false
  Pry.config.auto_indent = false
  Pry.config.correct_indent = true
  Pry.config.history_should_load = true
  Pry.config.history_should_save = true
  Pry.config.history_file = File.join(ENV["HOME"], ".irb_history")
  Pry.config.editor = ENV["EDITOR"]
  Pry.config.memory_size = 1000
  Pry.config.should_load_plugins = true
  Pry.config.exception_whitelist = [SystemExit, SignalException]
  Pry.config.default_window_size = 5

  local_pryrc = File.join(ENV["HOME"], ".pryrc.local")
  load local_pryrc if File.exist?(local_pryrc)
end

class Object
  def interesting_methods
    case self.class
    when Class then public_methods.sort - Object.public_methods
    when Module then public_methods.sort - Module.public_methods
    else public_methods.sort - Object.public_instance_methods
    end
  end
end

module Debug
  class Timer
    Result = Struct.new(:execution_result, :elapsed_time)

    def self.time(...)
      new(...).time
    end

    def initialize(&block)
      @code = block.to_proc
    end

    def time
      start = mark_time
      execution_result = @code.call
      elapsed_time = mark_time - start
      @result = Result.new(execution_result, elapsed_time)
    end

    def result
      @result || raise("No results recorded. Have you called `.time'?")
    end

    private

    def mark_time
      Process.clock_gettime(Process::CLOCK_MONOTONIC)
    end
  end

  module_function

  ##
  # Easy way of benchmarking methods. Arguments will be passed to all methods.
  #
  # @param [String, Symbol], *meths
  #
  # @kwarg [Array], arguments
  #
  # @kwarg [Integer], times
  #
  # @example
  #   Debug.compare :pp, :printf, times: 100_000
  #   Rehearsal ------------------------------------------
  #       pp   0.027888   0.000536   0.028424 (  0.028426)
  #   printf   0.009939   0.000042   0.009981 (  0.009980)
  #   --------------------------------- total: 0.038405sec
  #
  #                user     system      total        real
  #       pp   0.015730   0.000109   0.015839 (  0.015847)
  #   printf   0.007545   0.000049   0.007594 (  0.007612)
  def compare_methods(*meths, arguments: [], times: 10_000)
    require "benchmark"

    unless meths.all? { [String, Symbol].include?(_1.class) }
      raise ArgumentError, "methods must all be a string or symbol"
    end
    raise ArgumentError, "arguments must be an array" unless arguments.is_a?(Array)
    raise ArgumentError, "times must be an integer" unless times.is_a?(Integer)

    format_string = "%#{meths.max_by { _1.size }.size}s"
    Benchmark.bmbm do |benchmark|
      meths.each do |m|
        benchmark.report(sprintf(format_string, m)) do
          times.times { send(m, *arguments) }
        end
      end
    end
  end

  ##
  # Easy way of benchmarking procs. Arguments will be passed to all procs.
  #
  # @param [String, Symbol], *meths
  #
  # @kwarg [Array], arguments
  #
  # @kwarg [Integer], times
  #
  # @example
  #   Debug.compare -> { pp }, -> { printf }, times: 100_000
  #   Rehearsal ------------------------------------------
  #       pp   0.027888   0.000536   0.028424 (  0.028426)
  #   printf   0.009939   0.000042   0.009981 (  0.009980)
  #   --------------------------------- total: 0.038405sec
  #
  #                user     system      total        real
  #       pp   0.015730   0.000109   0.015839 (  0.015847)
  #   printf   0.007545   0.000049   0.007594 (  0.007612)
  def compare_procs(*procs, arguments: [], times: 10_000)
    require "benchmark"

    unless procs.all? { _1.is_a?(Proc) }
      raise ArgumentError, "methods must all be a string or symbol"
    end
    raise ArgumentError, "arguments must be an array" unless arguments.is_a?(Array)
    raise ArgumentError, "times must be an integer" unless times.is_a?(Integer)

    format_string = "%#{(procs.size + 1).to_s.size}s"
    Benchmark.bmbm do |benchmark|
      procs.each_with_index do |m, index|
        benchmark.report(sprintf(format_string, "Proc #{index}:")) do
          times.times { m.call(*arguments) }
        end
      end
    end
  end
end
